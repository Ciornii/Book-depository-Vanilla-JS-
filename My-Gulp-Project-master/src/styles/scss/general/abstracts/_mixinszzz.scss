/**
 * Flexbox Container
 */
@mixin flex($wrap: nowrap, $direction: row, $justify: flex-start, $align: stretch, $content: stretch, $order: 1) {
  display: flex;

  @if $wrap != nowrap {
    flex-wrap: $wrap;
  }
  @if $direction != row {
    flex-direction: $direction;
  }
  @if $justify != flex-start {
    justify-content: $justify;
  }
  @if $align != stretch {
    align-items: $align;
  }
  @if $content != stretch {
    align-content: $align;
  }
  @if $order != 1 {
    order: $order;
  }
}
/**
 * Animation mixin
 */
@mixin keyframes($animation-name) {
  @keyframes #{$animation-name} { @content; }
}
/**
 * Linear Gradient
 */
@mixin lineargradient($direction, $firstcolor, $secondcolor, $ratio, $blurry: true, $blurrate: 5) {
  $second-ratio: $ratio;
  @if $blurry == true {
    $second-ratio: $ratio + $blurrate;
  }
  $ratio: percentage($ratio / 100);
  $second-ratio: percentage($second-ratio / 100);
  background: linear-gradient(#{$direction}, $firstcolor, $firstcolor $ratio, $secondcolor $second-ratio, $secondcolor);
}
/**
 * Misc
 */
@mixin placeholder-custom {
  ::-webkit-input-placeholder {@content}
  :-moz-placeholder           {@content}
  ::-moz-placeholder          {@content}
  :-ms-input-placeholder      {@content}
}
/**
 * Font face mixin
 */
@mixin font-face($font-family, $file-path, $font-weight:'normal', $font-style:'normal') {
  @font-face {
    font-family: $font-family;
      src: url('#{$file-path}.eot');
      src: url('#{$file-path}.eot?#iefix') format('embedded-opentype'),
           url('#{$file-path}.woff') format('woff'),
           url('#{$file-path}.ttf') format('truetype'),
           url('#{$file-path}.svg##{$font-family}') format('svg');
    font-weight: $font-weight;
    font-style: $font-style;
  }
  // Chrome for Windows rendering fix: http://www.adtrak.co.uk/blog/font-face-chrome-rendering/
  @media screen and (-webkit-min-device-pixel-ratio: 0) {
    @font-face {
      font-family: $font-family;
        src: url('#{$file-path}.svg##{$font-family}') format('svg');
    }
  }
}

@mixin otf-face($font-family, $file-path, $font-weight:'normal', $font-style:'normal') {

  @font-face {
    font-family: $font-family;
    src: url('#{$file-path}.otf');
  }
}

/**
 * Media Queries
 */
@mixin respondto($device) {
  @each $name, $point in $breakpoints {
    @if $name == $device {
      @media #{$point} {
        @content;
      }
    }
  }
}
/**
 * Flex
 */
@mixin flexbox {
  display: flex;
}

@mixin flex-direction($value: row) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }

  flex-direction: $value;
}

@mixin flexwrap($wrap) {
          flex-wrap: $wrap;
  -webkit-flex-wrap: $wrap; /* Safari 6.1+ */
      -ms-flex-wrap: $wrap;
}

@mixin flex-wrap($value: nowrap) {
  @if $value == nowrap {
    -ms-flex-wrap: none;
  } @else {
    -ms-flex-wrap: $value;
  }

  flex-wrap: $value;
}

@mixin alignflex($property) {
       -ms-flex-align: $property;
          align-items: $property;
  -webkit-align-items: $property;
}

@mixin justifyflex($property) {
          justify-content: $property;
  -webkit-justify-content: $property;
  @if $property == space-between {
    -ms-flex-pack: justify;
  } @else if $property == flex-end {
    -ms-flex-pack: end;
  } @else if $property == flex-start {
    -ms-flex-pack: start;
  } @else if $property == center {
    -ms-flex-pack: center;
  }
}

@mixin alignflex($property) {
          align-items: $property;
  -webkit-align-items: $property;
      -ms-align-items: $property;
  @if $property == flex-end {
    -ms-flex-align: end;
  } @else if $property == flex-start {
    -ms-flex-align: start;
  } @else {
    -ms-flex-align: $property;
  }
}

@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -moz-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -moz-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -font-box-pack: justify;
    -ms-flex-pack: justify;
  } @else if $value == space-around {
    -ms-flex-pack: distribute;
  } @else {
    -webkit-box-pack: $value;
    -moz-box-pack: $value;
    -ms-flex-pack: $value;
  }
  justify-content: $value;
}

@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -moz-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -moz-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -moz-box-align: $value;
    -ms-flex-align: $value;
  }
  align-items: $value;
}

@mixin align-content($value: stretch) {
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }

  align-content: $value;
}

@mixin flex-grow($int: 1) {
  flex-grow: $int;
}

@mixin flexshrink($val) {
  -webkit-flex-shrink: $val;
    -ms-flex-negative: $val;
          flex-shrink: $val;
}

@mixin flex-percentage($percentage: 1) {
  @if $percentage != 1 {
    box-sizing: border-box;
    flex: 1 1 $percentage;
    max-width: $percentage;
  } @else {
    box-sizing: border-box;
    flex: 1;
    max-width: 100%;
  }
}

@mixin order($int: 0) {
  -webkit-box-ordinal-group: $int + 1;
  -moz-box-ordinal-group: $int + 1;
  -webkit-order: $int;
  -ms-flex-order: $int;
  order: $int;
}
/**
 * Shapes
 */

@mixin triangle($visibleBorder, $transparentBorder, $color, $size) {
  width: 0;
  height: 0;
  content: '';

  border-#{$visibleBorder}: #{ $size }px solid $color;
  border-#{$transparentBorder}: #{ $size / 2 }px solid transparent;
}
/**
 * BUTTON
 */
@mixin cs-button($backgroundColor, $triangleColor, $hasStar: false, $height: 30, $beforeWidth: 30%) {
  background-color: $backgroundColor;
  border: 0;
  border-radius: 0;
  color: #fff;
  font-family: 'myriad-boldCond';
  font-size: 1.7rem;
  height: if($height != 30, #{ $height }px, 30px);
  line-height: normal;
  outline: 0;
  overflow: hidden;
  padding: if($hasStar == true, 0 #{ $height - 15 }px 0 20px, 0 15px);
  position: relative;
  text-align: center;
  transition: background-color .4s cubic-bezier(.25,.8,.25,1);

  @include flexbox();
  @include justify-content(center);
  @include align-items(center);

  &:before {
    background-color: $triangleColor;
    content: '';
    left: -30%;
    height: 100%;
    position: absolute;
    top: 0;
    transform: skew(-26deg);
    transform-origin: bottom;
    transition: background-color .4s cubic-bezier(.25,.8,.25,1);
    width: $beforeWidth;
  }

  &:hover:not([disabled]),
  &:focus:not([disabled]) {
    background-color: $triangleColor;
    color: #fff;

    span[class*='icon-'] {
      color: $backgroundColor;
    }

    &:before {
      background-color: $backgroundColor;
    }
  }

  &[disabled] {
    background-color: $button-dark-gray;
    color: $gray;
    cursor: default;

    &:before {
      background-color: $button-light-gray;
    }
  }

  i {
    font-size: 1.8rem;
    height: 1.8rem;
    margin-right: 5px;
    width: 1.8rem;

    @include flexbox();
    @include align-items(center);
    @include justify-content(center);
  }

  span[class*='icon-'] {
    color: $triangleColor;
    font-size: #{ $height }px;
    height: #{ $height }px;
    line-height: #{ $height }px;
    position: absolute;
    right: -9px;
    top: 0;
    transition: color .4s cubic-bezier(.25,.8,.25,1);
    width: #{ $height }px;
  }

  // FF fix - content not aligned properly
  > div {
    @include flexbox();
    @include align-items(center);
  }
}


@mixin full-absolute($position: absolute) {
  bottom: 0;
  left: 0;
  position: $position;
  right: 0;
  top: 0;
}

@mixin break-inside($break: auto) {
  -webkit-column-break-inside: $break;
     page-break-inside: $break;
          break-inside: $break;
}
